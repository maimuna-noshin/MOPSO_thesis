	function [f, aux] = testFunction(x)
    % Test Function for MOPSO with Battery System
    % Input:
    %   x - Decision variables matrix (Nx2) [N_PV, N_Battery]
    % Output:
    %   f - Matrix of objective function values (Nx4)
    %   aux - Auxiliary data (empty in this case)

    %% Problem-Specific Parameters
    P_load = [200, 180, 150, 120, 100, 90, 80, 100, 150, 200, 250, 300, ...
              350, 400, 450, 500, 480, 450, 400, 350, 300, 250, 200, 180]; % Hourly load (W)

    R = [0, 0, 0, 0, 50, 150, 300, 500, 700, 800, 900, 1000, ...
         950, 900, 850, 700, 500, 300, 100, 50, 0, 0, 0, 0]; % Hourly irradiance

    eta_MPPT = 0.9;               % MPPT efficiency
    safety_margin = 0.1;          % Safety margin
    EF = 2.6;                     % Emission factor (kg/L)
    dt = 1;                      % Time step (hour)
    T = length(P_load);           % Total time steps
    SOC_min = 0.2;               % Minimum SOC
    SOC_max = 0.9;               % Maximum SOC
    Ec = 0.95;                     % Battery charging/discharging efficiency (Example)

    %% Objectives Evaluation
    [N, ~] = size(x);
    f = zeros(N, 4);
    for i = 1:N
        % Extract decision variables
        N_PV = round(x(i, 1));      % Number of PV panels
        battery_size = round(x(i, 2)); % Battery capacity (kWh)

        % Calculate Power Generated
        P_PV = N_PV * (R / 1000) * eta_MPPT * 0.9; % System efficiency included here

        % Initialize Battery SOC and Power
        SOC = zeros(1, T);
        SOC(1) = 0.5;  % Initial SOC (50%)
        P_battery = zeros(1, T);
        LPS = zeros(1, T);

        % Energy Management and Battery Operation
        unmet_load = 0;
        for t = 2:T
            P_net = P_PV(t) - P_load(t);

            % Battery Control Logic
            if P_net > 0  % Excess PV power
                if SOC(t-1) < SOC_max
                    P_battery(t) = min(P_net, (SOC_max - SOC(t-1)) * battery_size / dt / Ec); % Charge
                    SOC(t) = SOC(t-1) + P_battery(t) * dt * Ec / battery_size;
                else
                    P_battery(t) = 0; % Battery Full
                    SOC(t) = SOC(t-1);
                end
            elseif P_net < 0 % Power deficit
                if SOC(t-1) > SOC_min
                    P_battery(t) = max(P_net, (SOC_min - SOC(t-1)) * battery_size / dt * Ec); % Discharge
                    SOC(t) = SOC(t-1) + P_battery(t) * dt / (battery_size * Ec);
                else
                    P_battery(t) = 0; % Battery Empty
                    SOC(t) = SOC(t-1);
                end
            else
                P_battery(t) = 0;
                SOC(t) = SOC(t-1);
            end
            LPS(t) = max(0, P_load(t) - (P_PV(t) + P_battery(t)));
            if P_net < 0 && SOC(t) <= SOC_min
                unmet_load = unmet_load + abs(P_net);
            end
        end

        % Objective 1: LPSP Calculation
        total_LPS = sum(LPS) * (1 + safety_margin);
        total_load = sum(P_load);
        LPSP = total_LPS / total_load;

        % Objective 2: NPC Calculation
        C_PV = 1000 * N_PV;       % Example investment cost for PV
        C_battery = 500 * battery_size; % Example investment cost for Battery
        S_V = 0.2 * (C_PV + C_battery);   % Salvage value 
        P_f = 100;         % Penalty factor
        NPC = C_PV + C_battery - S_V + P_f * total_LPS;

        % Objective 3: Renewable Energy Utilization (REU)
        total_P_PV = sum(P_PV); % Total power generated by PV panels
        REU = total_P_PV / total_load; % Renewable energy utilization ratio

        % Objective 4: CO2 Emissions
        fuel_cons = LPS / (0.3 * 1000); % Assuming diesel generator efficiency of 30%
        CO2_emission = sum(fuel_cons) * EF;

        % Assign Objectives
        f(i, :) = [NPC, LPSP, -REU, CO2_emission]; % Minimize NPC, LPSP, and CO2; maximize REU
    end

    aux = []; % Auxiliary output (empty)
end
